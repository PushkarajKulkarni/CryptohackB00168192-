from Crypto.Util.number import long_to_bytes
n = 277728574098752575294159909112142119758443071844302414518994078387505030243233678955409816065867099859800034350821169958880177314266348458086247962925079891714976291094508258185873831122806390374845934906\
9293599820243763962674713365099060333309451353150520995427300447356719323553506194299175093272580867924996466709072348039791671532087686780371930131344000507505648120385901049083659971752366419711205320674523\
5908610484907715210436413015546671034478367679465233737115549451849810421017181842615880836253875862101545582922437858358265964489786463923280312860843031914516061327752183283528015684588796400861331354873
e = 16
ct = 11303174761894431146735697569489134747234975144162172162401674567273034831391936916397234068346115459134602443963604063679379285919302225719050193590179240191429612072131629779948379821039610415099784351\
0734432189113563288154580506944937269512312410966956264775864288802205280012697465470187412371317412550223719574894623803051006346004992044357632013711887694460549257481519871756566773427790434350470481305991\
23081581036362712208692748034620245590448762406543804069935873123161582756799517226666835316588896306926659321054276507714414876684738121421124177324568084533020088172040422767194971217814466953837590498718

def tonelli_shanks(n,p):
  Q,S=p-1,0
  while Q%2==0:               Q,S=Q//2,S+1
  z=2
  while pow(z,(p-1)//2,p)==1: z+=1
  M,c,t,R=S,pow(z,Q,p),pow(n,Q,p),pow(n,(Q+1)//2,p)
  while True:
    if t==0:                  return 0
    if t==1:                  return R
    i=0
    while pow(t,2**i,p)!=1:   i+=1
    b=pow(c,2**(M-i-1),p)
    b2=pow(b,2,p)
    M,c,t,R=i,b2,(t*b2)%p,(R*b)%p
# Recursively generate 2^k-th roots of number x modulo prime p
def iterated_square_roots(x,k,p):
  if k==0:
    yield x
  # discard non-quadratic residues modulo p using Legendre's symbol
  elif pow(x,(p-1)//2,p)==1:
    q=tonelli_shanks(x,p)
    yield from iterated_square_roots(q,k-1,p)
    yield from iterated_square_roots(p-q,k-1,p)

for s in iterated_square_roots(ct,4,n):
  if b'crypto' in long_to_bytes(s):
    print(long_to_bytes(s))
    break